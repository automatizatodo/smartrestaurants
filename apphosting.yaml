# apphosting.yaml

# Specifies the version of the App Hosting YAML schema.
# Required.
schemaVersion: v1alpha1

# buildConfig:
  # Optional. If not specified, App Hosting will attempt to build
  # your app using npm run build or a framework-specific build command.
  # buildCommand: "npm run build" # Your package.json already has this

runConfig:
  # Optional. Specifies the port that your application listens on.
  # Defaults to 3000. App Hosting will map this to 80/443.
  # port: 3000 # Your start script "next start" defaults to 3000

  # Environment variables available to your application at runtime.
  environmentVariables:
    GOOGLE_CALENDAR_ID: "primary" # <-- !!! IMPORTANT: Replace with your actual Calendar ID if not 'primary'
    NEXT_PUBLIC_APP_URL: "https://studio--gastronomic-canvas.us-central1.hosted.app" # <-- !!! IMPORTANT: Replace with your Firebase Hosting URL (e.g., https://your-project-id.web.app)

    # --- UNSAFE METHOD: FOR TESTING/NON-CRITICAL ENVIRONMENTS ONLY ---
    # If you absolutely cannot use Google Secret Manager and understand the security risks,
    # you can embed the JSON content here.
    #
    # 1. Open your service account JSON key file (e.g., gastronomic-canvas-credentials.json.json).
    # 2. Copy ALL of its content.
    # 3. Paste the entire JSON content below, replacing the placeholder.
    # 4. Ensure the indentation and formatting are correct for YAML multi-line strings (using `|`).
    #
    # WARNING: This is NOT recommended for production as it embeds sensitive credentials
    # directly in your configuration file. Use Google Secret Manager for production.
    #
    # If you use this method, your application code (check-calendar-availability-flow.ts
    # and create-calendar-event-flow.ts) will attempt to parse this JSON string.
    # The `GOOGLE_APPLICATION_CREDENTIALS` variable pointing to a file path will be ignored
    # by the flows if `GOOGLE_CREDENTIALS_JSON` is set and parsed successfully.
    #
    # REMOVE THE `secret: GOOGLE_SERVICE_ACCOUNT_JSON_CONTENT` LINE FOR `GOOGLE_CREDENTIALS_JSON` BELOW
    # IF YOU CHOOSE THIS UNSAFE METHOD. CHOOSE ONE METHOD, NOT BOTH.
    #
    # GOOGLE_CREDENTIALS_JSON: |
    #   {
    #     "type": "service_account",
    #     "project_id": "YOUR_PROJECT_ID",
    #     "private_key_id": "YOUR_PRIVATE_KEY_ID",
    #     "private_key": "-----BEGIN PRIVATE KEY-----\nYOUR_ACTUAL_PRIVATE_KEY_CONTENT_HERE\n-----END PRIVATE KEY-----\n",
    #     "client_email": "YOUR_SERVICE_ACCOUNT_EMAIL@YOUR_PROJECT_ID.iam.gserviceaccount.com",
    #     "client_id": "YOUR_CLIENT_ID",
    #     "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    #     "token_uri": "https://oauth2.googleapis.com/token",
    #     "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    #     "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/YOUR_SERVICE_ACCOUNT_EMAIL_ENCODED%40YOUR_PROJECT_ID.iam.gserviceaccount.com"
    #   }

    # --- RECOMMENDED SECURE METHOD (using Google Secret Manager) ---
    # This tells the application to read the Google service account JSON
    # from the secret named 'GOOGLE_SERVICE_ACCOUNT_JSON_CONTENT' in Google Secret Manager.
    # The application code will use GOOGLE_CREDENTIALS_JSON if set, otherwise it will
    # look for GOOGLE_APPLICATION_CREDENTIALS (which Secret Manager sets effectively).
    # For App Hosting, it's best to let it handle this via the 'secret' field.
    # The flow files are set up to parse GOOGLE_CREDENTIALS_JSON first.
    # If using this method, ensure GOOGLE_CREDENTIALS_JSON above is COMMENTED OUT or REMOVED.
    GOOGLE_CREDENTIALS_JSON: # This variable name matches what the flow code checks.
      {
        "type": "service_account",
        "project_id": "test-restaurant-459912",
        "private_key_id": "8f3e8b7d8f9c59240cb1bd3b8587ae46e5a5e5cc",
        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCiPPQeyxxCo7nr\naDvcXXzbhozYVj9RiQqncE3ha6bnSblXyQ7DUdqrv6JqfWSXnzPVNooHzlJjNcUw\n9RFUBHosHtb0EsvA/wwayyW7EXyVRQzeb8lNWO1csteFG8W34CQE2QcfJiE12lpG\nzkQ3Q4nVJ/LUWjGWm5ZAZlzULgXgs2PwjIbb5yFPv2rfWPoougctsLmRXhGZ+vU7\ntehAXH17KPxr43X8vZm4+p5adrYPNFH5o9ipI/QlgCirR1CbbSweCHGksYWMP6rJ\nWjALI5STWvGCF5yLHDwqbjBH42b8J7q9hP61hjON4ZKvQckOFvavPeZO03gKQGQo\nxgkVvrB3AgMBAAECggEANWQI1J90B+w4saNmW8F6ZwYzELjlcpA+bNb1ElOqpB/r\nelvE23tzEqVorlHgylMOrEKcDzCThWm7IL7tunAUwrNNexo6aqOkmKa1HoiFLtx/\n/S3dmfJDfweuDHSUz0vYnq3LfbE/KalXn0ifQ26bDAZvD/o0qoM+YaguMXeJ4KWy\nOAISKJl2FEtdAKKYDHESlHjKdp64jZW98x8SV+JTG12SSZGIFz8j1X4WZ4+z8XUD\n5pVS5LJ6JFj1jlc+TddloMIgAKbxVOOLWQsL86qflbxMgoNlvTcVaa/8+g0N4gC4\nV0Ct6fR1oGofcItAGsnX2JY7Xx8Rdxhnv0mMiXn+VQKBgQDZlgCyT9XyqYl2yAp5\ngXXgR2gCAQ5jEepoHzdFnKcb7q9CW5EiMIrZtmoJ+ECZ8PmYECT2Fd79qvP5PORr\nyyWR0gOolZVkewmPv5bqR6MRWbnPbpQOzLjH+WWaTXHD1hIP6+MfgAUijCS+viMZ\n5otpYzmobI7+22wHFL9qQFydzQKBgQC+4XQznZXcF6Z4CObQAIHYMmfycERL8aj4\nQsSvUR34mzo416zwVol4HRUnVbebu780rGTFn/KhZhCxpnYRTmMWYAixgBMXMAzi\nns/fTULPlCYzl5top8vt9zMVWglHksGt1YgBfjm3dQ4JSEnsfaF901ql1agYRtNh\nWVpzzjajUwKBgQCfABmkM+kBOdjFHytgXTVZXnTnugPca5Qi4GTQjsgjBkm2MRme\npWBh9gYJIQt8MvcBoxKPba4VKp68jD3Tc5ERvSmFQUH5OlvjWrsampzUKgA5T/IL\n2phRMbOIjX1MAZwTXGoNc8zM0SJs7J7T54AK1EKnDCV2obuQdR3ns/66JQKBgCHS\n14Fx8iUu96ubgDLpdBi4Td0S8bc3Wkarpiieyh3Me9OovBdWbkOfe6kdskxhR29x\nAOZYAmmBKYIhShik+D/1wnSZikh4lj/t/k3GZglcaiyIN9yipytCu4WUD8LkCXfh\nN5l0IYwVrOgOLDNAy8X9Frn+EyxCGKDOcY3Fw77LAoGAaVccPMEE0VUMKZlYsTeg\nyVi0DkeSBvnjQIipjJFQtlGZvSfrknhF10EiCxk4SvMqnw5j4Sfkpvjeg/ixfIUy\n+2MTG2WmkDeR7kRJNsjUzKpwjkgwmVzq5byo+s2JsPkYC3kYQ9NIzp2lpVCJlgCs\niKJ7WOF5Yp+od2GXrEFSck0=\n-----END PRIVATE KEY-----\n",
        "client_email": "editor@test-restaurant-459912.iam.gserviceaccount.com",
        "client_id": "111516871261711309072",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/editor%40test-restaurant-459912.iam.gserviceaccount.com",
        "universe_domain": "googleapis.com"
      }
 # <-- !!! IMPORTANT: This MUST match the secret name you created in Secret Manager

# Specifies that this is a Next.js backend.
# An empty backend: {} block is often sufficient for Next.js apps.
# App Hosting will use your package.json scripts "build" and "start".
backend: {}

    